'use client';

import { useEffect, useState, useMemo, useRef } from 'react';
import { getLicitacoes, requestAnalises } from '@/services/api';
import { Licitacao, Analise } from '@/types';

// --- COMPONENTE DE STATUS DA ANÃLISE (CORRIGIDO) ---
const StatusAnalise: React.FC<{ analise: Analise | undefined; onVerResultado: () => void }> = ({ analise, onVerResultado }) => {
  if (!analise) {
    return <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">N/A</span>;
  }

  // FunÃ§Ã£o para garantir que o Tailwind "veja" as classes completas
  const getStatusStyle = (status: string) => {
    switch (status) {
      case 'Pendente':
        return 'bg-yellow-100 text-yellow-800';
      case 'Em Andamento':
        return 'bg-blue-100 text-blue-800';
      case 'ConcluÃ­do':
        return 'bg-green-100 text-green-800';
      case 'Erro':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="flex flex-col items-center gap-1">
      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusStyle(analise.status)}`}>
        {analise.status}
      </span>
      {analise.status === 'ConcluÃ­do' && (
        <button onClick={onVerResultado} className="text-xs text-blue-600 hover:underline">
          Ver Resultado
        </button>
      )}
    </div>
  );
};


// --- LÃ“GICA DE CLASSIFICAÃ‡ÃƒO ---
const getClassificacao = (objeto: string | null): string => {
  if (!objeto) return 'Outros';
  const texto = objeto.toLowerCase();
  const keywordsServico = ["serviÃ§os", "consultoria", "manutenÃ§Ã£o", "execuÃ§Ã£o de obra", "elaboraÃ§Ã£o de projeto"];
  const keywordsAquisicao = ["aquisiÃ§Ã£o", "compra", "fornecimento", "material", "equipamentos"];
  if (keywordsServico.some(kw => texto.includes(kw))) return 'ServiÃ§o';
  if (keywordsAquisicao.some(kw => texto.includes(kw))) return 'AquisiÃ§Ã£o';
  return 'Outros';
};

export default function LicitacoesTabela() {
  const [licitacoes, setLicitacoes] = useState<Licitacao[]>([]);
  const [loading, setLoading] = useState(true);
  const [filtroUF, setFiltroUF] = useState('');
  const [ordemValor, setOrdemValor] = useState('');
  const [dataInicio, setDataInicio] = useState('');
  const [dataFim, setDataFim] = useState('');
  const [filtroTipo, setFiltroTipo] = useState('');
  const [selectedIds, setSelectedIds] = useState<Set<number>>(new Set());
  const [isAnalysing, setIsAnalysing] = useState(false);
  const [selectedAnaliseResult, setSelectedAnaliseResult] = useState<string | null>(null);
  const selectAllCheckboxRef = useRef<HTMLInputElement | null>(null);

  const fetchData = async () => {
    const data = await getLicitacoes();
    setLicitacoes(data);
    setLoading(false);
  };

  useEffect(() => {
    fetchData();
  }, []);

  // --- LÃ“GICA DE POLLING (AUTO-REFRESH) ---
  useEffect(() => {
    const temAnalisePendente = licitacoes.some(l => 
      l.analises && l.analises.some(a => a.status === 'Pendente' || a.status === 'Em Andamento')
    );

    if (temAnalisePendente) {
      const timer = setTimeout(() => {
        fetchData();
      }, 5000); // Verifica a cada 5 segundos

      return () => clearTimeout(timer); 
    }
  }, [licitacoes]);


  const licitacoesExibidas = useMemo(() => {
    let licitacoesProcessadas = [...licitacoes];
    if (filtroUF) { licitacoesProcessadas = licitacoesProcessadas.filter((l) => l.uf === filtroUF); }
    if (dataInicio) { const inicio = new Date(dataInicio + 'T00:00:00'); licitacoesProcessadas = licitacoesProcessadas.filter((l) => l.data_encerramento_proposta && new Date(l.data_encerramento_proposta) >= inicio); }
    if (dataFim) { const fim = new Date(dataFim + 'T23:59:59'); licitacoesProcessadas = licitacoesProcessadas.filter((l) => l.data_encerramento_proposta && new Date(l.data_encerramento_proposta) <= fim); }
    if (filtroTipo) { licitacoesProcessadas = licitacoesProcessadas.filter((l) => getClassificacao(l.objeto_compra) === filtroTipo); }
    if (ordemValor) { licitacoesProcessadas.sort((a, b) => { const vA = a.valor_total_estimado ? parseFloat(a.valor_total_estimado) : 0; const vB = b.valor_total_estimado ? parseFloat(b.valor_total_estimado) : 0; return ordemValor === 'asc' ? vA - vB : vB - vA; }); }
    return licitacoesProcessadas;
  }, [licitacoes, filtroUF, ordemValor, dataInicio, dataFim, filtroTipo]);

  const ufsDisponiveis = useMemo(() => 
    [...new Set(licitacoes.map((l) => l.uf).filter(Boolean))].sort()
  , [licitacoes]);

  const handleSelect = (id: number) => {
    const newSelectedIds = new Set(selectedIds);
    if (newSelectedIds.has(id)) newSelectedIds.delete(id); else newSelectedIds.add(id);
    setSelectedIds(newSelectedIds);
  };

  const handleSelectAll = () => {
    if (selectedIds.size === licitacoesExibidas.length) {
      setSelectedIds(new Set());
    } else {
      setSelectedIds(new Set(licitacoesExibidas.map(l => l.id)));
    }
  };

  const handleAnalisar = async () => {
    if (selectedIds.size === 0) return;

    setIsAnalysing(true);
    const licitacaoIds = Array.from(selectedIds);
    
    try {
      await requestAnalises(licitacaoIds);
      setSelectedIds(new Set());
      alert(`${licitacaoIds.length} anÃ¡lise(s) solicitada(s) com sucesso! O status serÃ¡ atualizado em breve.`);
      setTimeout(fetchData, 1000); 

    } catch (error) {
      console.error("Erro ao solicitar anÃ¡lises:", error);
      alert("Ocorreu um erro ao solicitar as anÃ¡lises. Tente novamente.");
    } finally {
      setIsAnalysing(false);
    }
  };

  const handleVerResultado = (analise: Analise) => {
    console.log("Tentando ver resultado da anÃ¡lise:", analise); // Ponto de depuraÃ§Ã£o
    if (analise && analise.resultado) {
      setSelectedAnaliseResult(analise.resultado);
    } else {
      console.error("Resultado da anÃ¡lise Ã© nulo ou indefinido.", analise);
      alert("NÃ£o foi possÃ­vel carregar o resultado da anÃ¡lise.");
    }
  };

  const handleExport = () => {
    if (selectedIds.size === 0) return;
    const dataToExport = licitacoes.filter(l => selectedIds.has(l.id));
    const headers = ["id", "numero_controle_pncp", "objeto_compra", "valor_total_estimado", "orgao_entidade_nome", "uf", "municipio_nome", "data_publicacao_pncp", "data_encerramento_proposta", "link_sistema_origem"];
    
    const sanitizeCell = (cellData: any) => {
      if (cellData === null || cellData === undefined) return '';
      const str = String(cellData);
      const escapedStr = str.replace(/"/g, '""');
      return `"${escapedStr}"`;
    };

    const csvRows = [headers.join(',')];
    dataToExport.forEach(item => {
      const row = headers.map(header => sanitizeCell(item[header as keyof Licitacao]));
      csvRows.push(row.join(','));
    });

    const csvString = csvRows.join('\n');
    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', 'licitacoes_selecionadas.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  useEffect(() => {
    const isIndeterminate = selectedIds.size > 0 && selectedIds.size < licitacoesExibidas.length;
    if (selectAllCheckboxRef.current) {
      selectAllCheckboxRef.current.indeterminate = isIndeterminate;
    }
  }, [selectedIds, licitacoesExibidas]);

  if (loading) return <p>Carregando licitaÃ§Ãµes...</p>;

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">LicitaÃ§Ãµes Encontradas</h1>
      {/* Filtros */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4 p-4 bg-gray-50 rounded-lg border">
        <div><label htmlFor="filtro-uf" className="block text-sm font-medium text-gray-700 mb-1">Estado (UF)</label><select id="filtro-uf" value={filtroUF} onChange={(e) => setFiltroUF(e.target.value)} className="w-full p-2 border border-gray-300 rounded-md shadow-sm"><option value="">Todos</option>{ufsDisponiveis.map((uf) => (<option key={uf} value={uf}>{uf}</option>))}</select></div>
        <div><label htmlFor="filtro-tipo" className="block text-sm font-medium text-gray-700 mb-1">Tipo de LicitaÃ§Ã£o</label><select id="filtro-tipo" value={filtroTipo} onChange={(e) => setFiltroTipo(e.target.value)} className="w-full p-2 border border-gray-300 rounded-md shadow-sm"><option value="">Todos</option><option value="ServiÃ§o">ServiÃ§o</option><option value="AquisiÃ§Ã£o">AquisiÃ§Ã£o</option><option value="Outros">Outros</option></select></div>
        <div><label className="block text-sm font-medium text-gray-700 mb-1">Encerramento Entre</label><div className="flex items-center gap-2"><input type="date" value={dataInicio} onChange={(e) => setDataInicio(e.target.value)} className="w-full p-2 border border-gray-300 rounded-md shadow-sm"/><input type="date" value={dataFim} onChange={(e) => setDataFim(e.target.value)} className="w-full p-2 border border-gray-300 rounded-md shadow-sm"/></div></div>
        <div><label className="block text-sm font-medium text-gray-700 mb-1">AÃ§Ãµes</label><div className="flex gap-2"><button onClick={() => setOrdemValor('asc')} className={`flex-1 p-2 text-sm rounded-md ${ordemValor === 'asc' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>Valor Crescente</button><button onClick={() => setOrdemValor('desc')} className={`flex-1 p-2 text-sm rounded-md ${ordemValor === 'desc' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>Valor Decrescente</button><button onClick={() => { setOrdemValor(''); setFiltroUF(''); setDataInicio(''); setDataFim(''); setFiltroTipo(''); setSelectedIds(new Set()); }} className="p-2 text-sm bg-gray-300 rounded-md">Limpar</button></div></div>
      </div>

      {/* AÃ§Ãµes em Lote */}
      <div className="flex items-center justify-between mb-2 h-9">
        <div className="text-sm text-gray-600">
          {selectedIds.size > 0 && <span>{selectedIds.size} de {licitacoesExibidas.length} itens selecionados.</span>}
        </div>
        {selectedIds.size > 0 && (
          <div className="flex gap-2">
            <button onClick={handleAnalisar} className="px-4 py-2 text-sm font-medium text-white bg-purple-600 rounded-md hover:bg-purple-700 disabled:bg-gray-400" disabled={selectedIds.size === 0 || isAnalysing}>
              {isAnalysing ? 'Analisando...' : 'Analisar Selecionados'}
            </button>
            <button onClick={handleExport} className="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700 disabled:bg-gray-400" disabled={selectedIds.size === 0}>
              Exportar Selecionados (CSV)
            </button>
          </div>
        )}
      </div>

      {/* Tabela */}
      <div className="overflow-x-auto">
        <table className="min-w-full bg-white border border-gray-200">
          <thead>
            <tr className="bg-gray-100">
              <th className="py-2 px-3 border-b w-12 text-center"><input type="checkbox" ref={selectAllCheckboxRef} checked={licitacoesExibidas.length > 0 && selectedIds.size === licitacoesExibidas.length} onChange={handleSelectAll} className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500" /></th>
              <th className="py-2 px-4 border-b">Ã“rgÃ£o</th>
              <th className="py-2 px-4 border-b">Objeto</th>
              <th className="py-2 px-4 border-b">Data de Encerramento</th>
              <th className="py-2 px-4 border-b">Valor Estimado</th>
              <th className="py-2 px-4 border-b">Edital</th>
              <th className="py-2 px-4 border-b">Status da AnÃ¡lise</th>
            </tr>
          </thead>
          <tbody>
            {licitacoesExibidas.map((licitacao) => (
              <tr key={licitacao.id} className={`${selectedIds.has(licitacao.id) ? 'bg-blue-100' : 'hover:bg-gray-50'}`}>
                <td className="py-2 px-3 border-b text-center"><input type="checkbox" checked={selectedIds.has(licitacao.id)} onChange={() => handleSelect(licitacao.id)} className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500" /></td>
                <td className="py-2 px-4 border-b">{licitacao.orgao_entidade_nome}</td>
                <td className="py-2 px-4 border-b">{licitacao.objeto_compra}</td>
                <td className="py-2 px-4 border-b">{licitacao.data_encerramento_proposta ? new Date(licitacao.data_encerramento_proposta).toLocaleDateString('pt-BR') : 'N/A'}</td>
                <td className="py-2 px-4 border-b text-right">{licitacao.valor_total_estimado ? parseFloat(licitacao.valor_total_estimado).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }) : 'N/A'}</td>
                <td className="py-2 px-4 border-b text-center">{licitacao.link_sistema_origem ? (<a href={licitacao.link_sistema_origem} target="_blank" rel="noopener noreferrer" className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm">Acessar</a>) : ('N/D')}
                </td>
                <td className="py-2 px-4 border-b text-center">
                  <StatusAnalise 
                    analise={licitacao.analises && licitacao.analises[0]} 
                    onVerResultado={() => handleVerResultado(licitacao.analises[0])}
                  />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Modal de Resultado da AnÃ¡lise */}
      {selectedAnaliseResult && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onClick={() => setSelectedAnaliseResult(null)}>
          <div className="bg-white p-6 rounded-lg shadow-xl max-w-2xl w-full" onClick={(e) => e.stopPropagation()}>
            <h3 className="text-lg font-bold mb-4">Resultado da AnÃ¡lise</h3>
            <div className="whitespace-pre-wrap bg-gray-50 p-4 rounded">
              {selectedAnaliseResult}
            </div>
            <button onClick={() => setSelectedAnaliseResult(null)} className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
              Fechar
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
